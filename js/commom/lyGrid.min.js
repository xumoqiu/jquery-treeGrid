/**
 * js表格分页工具组件,
 * 详细教程:  http://www.lanyuanoss.com/lanyuanoss/1463730205140/views.shtml
 * icheck组件 http://www.bootcss.com/p/icheck/
 * @author lanyuan
 * @update 2018-09－01
 * @Email: mmm333zzz520@163.com (支付宝同号,非常感谢捐助支持)
 * @version 1.2.0v
 */
; (function($) {
    $.fn.lyGrid = (function(options) {
        var grid = this.get(0);
        var confs = {
            l_column: [],
            dymCol: false,
            width: "100%",
            height: "100%",
            theadHeight: "28px",
            tbodyHeight: "27px",
            jsonUrl: "",
            isFixed: false,
            usePage: true,
            setNumber: false,
            selectPage: true,
            selectPageSize: [10, 20, 30, 40, 50, 100],
            goPage: true,
            local: false,
            records: "records",
            pageNow: "pageNow",
            totalPages: "pageCount",
            totalRecords: "rowCount",
            pagecode: "10",
            async: false,
            data: {
                sidx: "",
                sord: "",
                pageNow: ""
            },
            pageSize: 10,
            checkbox: false,
            checkValue: "id",
            trRowClick: null,
            beforeComplete: null,
            afterComplete: null,
            iCheck: {
                checkboxClass: "icheckbox_square-green",
                radioClass: "iradio_square-green",
            },
            treeGrid: {
                type: 1,
                hide: false,
                checkChild: false,
                name: "name",
                parent: "",
                id: "id",
                pid: "pid"
            },
        };
        var l_col = {
            colkey: null,
            name: null,
            width: "auto",
            title: false,
            theadClass: "",
            tbodyClass: "",
            height: "auto",
            align: "center",
            hide: false,
            isSort: false,
            renderData: null
        };
        var conf = $.extend(confs, options);
        var l_tree = conf.treeGrid;
        var col = [];
        for (var i = 0; i < conf.l_column.length; i++) {
            col.push(l_col);
        }
        var column = conf.l_column;
        var initialization = function(json) {
            createHtml(json);
            lyickeck();
        };
        var returnData = new Object();

        var createHeader = function(){
            if (String(conf.isFixed) == "true") {
                cHeadTable();
            }
            cBodyTh();
        }


        var loadingDiv = function(){
            $("#" + grid.id + " table > tbody").remove();
            var tbody = document.createElement("tbody");


            var tr = document.createElement("tr");

            var td = document.createElement("td");
            td.setAttribute("style","text-align:center;")

            td.innerHTML = '<div style="display:flex;" ></div><span class="loading-wrap"><span class="loading-text">Loading, please wait</span><span class="animation-wrap"><span class="animation-dot"></span></span></span></div>';

            var columnLength = column.length ;
            if (String(conf.checkbox) == "true") {
                columnLength = columnLength +1 ;
            }
            if (String(conf.setNumber) == "true") {
                columnLength = columnLength +1 ;
            }

            td.setAttribute("colspan", columnLength);
            tr.appendChild(td);
            tbody.appendChild(tr);
            grid.getElementsByTagName("table")[0].appendChild(tbody);
        }

        var noDataOrFailDiv = function(text){
            $("#" + grid.id + " table > tbody").remove();
            var tbody = document.createElement("tbody");


            var tr = document.createElement("tr");

            var td = document.createElement("td");
            td.setAttribute("style","text-align:center;")

            td.innerText = text;

            var columnLength = column.length ;
            if (String(conf.checkbox) == "true") {
                columnLength = columnLength +1 ;
            }
            if (String(conf.setNumber) == "true") {
                columnLength = columnLength +1 ;
            }

            td.setAttribute("colspan", columnLength);
            tr.appendChild(td);
            tbody.appendChild(tr);
            grid.getElementsByTagName("table")[0].appendChild(tbody);
        }

        var createBody = function(jsonData){
            returnData = jsonData;

            var length = CommonUtil._getValueByName(jsonData, conf.records);

            if(CommonUtil.notNull(jsonData)){
                cBodytb(jsonData);
                if (String(conf.usePage) == "true") {
                    fenyeDiv(jsonData);
                }
            }else{
                noDataOrFailDiv("No matching records found");
                
            }
            lyickeck();
        }

        var createHtml = function(jsonData) {
            if (jsonData == "") {
                return;
            }
            returnData = jsonData;
            grid.innerHTML = "";
            if (String(conf.isFixed) == "true") {
                cHeadTable();
            }
            cBodyTh();
            // loadingDiv();
            cBodytb(jsonData);
            if (String(conf.usePage) == "true") {
                fenyeDiv(jsonData);
            }
        };
        var replayData = function(nconf, o, key, sort) {
            if (o) {
                if (nconf.beforeComplete) {
                    nconf.beforeComplete(nconf);
                }
                var records = CommonUtil._getValueByName(returnData, nconf.records);
                var _array = _.sortBy(records, key);
                if (sort == "asc") {
                    returnData[nconf.records] = _array;
                } else {
                    returnData[nconf.records] = _array.reverse();
                }

                nconf.jsonUrl = returnData[nconf.records];

                if (nconf.afterComplete) {
                    nconf.afterComplete(column, resultJSONData());
                }
                jsonRequest(nconf);
            } else {
                jsonRequest(nconf);
            }
        };
        var cHeadTable = function() {
            var table = document.createElement("table");
            table.id = "table_head";
            table.className = "ly-table table table-striped table-bordered";
            table.setAttribute("style", "margin-bottom: 0px;");
            grid.appendChild(table);
            var thead = document.createElement("thead");
            table.appendChild(thead);
            var tr = document.createElement("tr");
            tr.setAttribute("style", "line-height:" + conf.tbodyHeight + ";");
            thead.appendChild(tr);
            var cn = "";
            if (String(conf.setNumber) == "false") {
                cn = "none";
            }
            var th = document.createElement("th");
            th.setAttribute("style", "text-align:center;width: 15px;vertical-align: middle;display: " + cn + ";");
            tr.appendChild(th);
            var cbk = "";
            if (String(conf.checkbox) == "false") {
                cbk = "none";
            }
            var cth = document.createElement("th");
            cth.setAttribute("style", "text-align:center;width: 28px;vertical-align: middle;text-align:center;display: " + cbk + ";");
            var chkbox = document.createElement("INPUT");
            chkbox.type = "checkbox";
            chkbox.className = "i-checks";
            chkbox.setAttribute("pagId", grid.id);
            cth.appendChild(chkbox);
            tr.appendChild(cth);
            $.each(column,
            function(o) {
                if (!column[o].hide || column[o].hide == undefined) {
                    var th = document.createElement("th");
                    th.className = column[o].theadClass;
                    th.setAttribute("style", "text-align:" + column[o].align + ";width: " + column[o].width + ";height:" + conf.theadHeight + ";vertical-align: middle;");
                    if (column[o].isSort) {
                        th.innerHTML = column[o].name + '<span style="float:right;line-height:inherit;" class="fa fa-unsorted"></span>'
                    } else {
                        th.innerHTML = column[o].name;
                    }
                    tr.appendChild(th);
                }
            })
        };
        var cBodyTh = function(returnData) {
            var tdiv = document.createElement("div");
            var h = "";
            var xy = "hidden";
            if (conf.height == "100%") {
                if (String(conf.isFixed) == "false") {
                    h = "auto"
                } else {
                    xy = "auto";
                    h = $(window).height() - $("#" + (grid.id) + " #table_head").offset().top - $("#" + (grid.id) + " #table_head").find("th:last").eq(0).height();
                    if (String(conf.usePage) == "true") {
                        h -= 55;
                    }
                    h += "px";
                }
            } else {
                h = conf.height;
            }
            tdiv.setAttribute("style", "overflow-y: " + xy + "; height: " + h + "; background: white;");
            tdiv.className = "t_table";
            grid.appendChild(tdiv);
            var table2 = document.createElement("table");
            table2.id = "mytable";
            table2.className = "ly-table table table-striped table-bordered table-hover";
            table2.setAttribute("style", "margin-bottom: 0px;width:" + conf.width);
            tdiv.appendChild(table2);
            var thead = document.createElement("thead");
            table2.appendChild(thead);
            if (String(conf.isFixed) == "false") {
                var tr = document.createElement("tr");
                tr.setAttribute("style", "line-height:" + conf.tbodyHeight + ";");
                thead.appendChild(tr);
                var cn = "";
                if (String(conf.setNumber) == "false") {
                    cn = "none";
                }
                var th = document.createElement("th");
                th.setAttribute("style", "text-align:center;width: 15px;vertical-align: middle;display: " + cn + ";");
                tr.appendChild(th);
                var cbk = "";
                if (String(conf.checkbox) == "false") {
                    cbk = "none";
                }
                var cth = document.createElement("th");
                cth.setAttribute("style", "text-align:center;width: 28px;vertical-align: middle;text-align:center;display: " + cbk + ";");
                var chkbox = document.createElement("INPUT");
                chkbox.type = "checkbox";
                chkbox.className = "i-checks";
                chkbox.setAttribute("pagId", grid.id);
                cth.appendChild(chkbox);
                tr.appendChild(cth);
                $.each(column,
                function(o) {
                    var th = document.createElement("th");
                    th.setAttribute("data-field",column[o].colkey);
                    th.className = column[o].theadClass;
                    var at = "text-align:" + column[o].align + ";width: " + column[o].width + ";height:" + conf.theadHeight + ";vertical-align: middle;";
                    if (column[o].isSort) {
                    	// var wup="fa fa-unsorted";
                    	// var adc = "asc";
                    	// if(column[o].colkey==returnData.sidx){
                    	// 	if(returnData.sord=="desc"){
                    	// 		wup="fa fa-sort-down";
                    	// 		adc = "desc";
                        //     }
                        //     if(returnData.sord == "asc"){
                        //         wup="fa fa-sort-up";
                    	// 		adc = "asc";
                        //     }
                        // }
                        

                    


                        var sortSpan =  document.createElement("div");
                        //sortSpan.className = wup;
                        sortSpan.className="sortable both";
                        //sortSpan.title = column[o].colkey + ',' + adc;
                        //sortSpan.setAttribute("style","float:right;line-height:inherit;cursor:pointer;color:#ccc;");
                        //'<span style="float:right;line-height:inherit;" class="'+wup+'" title="' + column[o].colkey + ','+adc+'"></span>';
                        
                       // at +="cursor:pointer;";
                        sortSpan.innerHTML = column[o].name;
                        th.onclick = sortBind.bind();
                        th.appendChild(sortSpan);
                    } else {
                        th.innerHTML = column[o].name;
                    }
                    if (column[o].hide == true) {
                        at += "display:" + (column[o].hide ? "none": "block");
                    }
                    th.setAttribute("style", at);
                    tr.appendChild(th);
                });
                if (conf.dymCol) {
                    var ico = document.createElement("i");
                    ico.className = "fa fa-thumb-tack";
                    ico.setAttribute("style", "float: right;margin-top: 3px;cursor: pointer;");
                    ico.onclick = dmycol.bind();
                    tr.lastChild.appendChild(ico);
                }
            }
        };
        var jlist;
        var cBodytb = function(jsonData) {
            jlist = [];
            $("#" + grid.id + " table > tbody").remove();
            var tbody = document.createElement("tbody");
            grid.getElementsByTagName("table")[0].appendChild(tbody);
            var json = CommonUtil._getValueByName(jsonData, conf.records);
            var d = 0;
            var e = json.length;
            if (String(conf.local) == "true") {
                pNow = parseInt(CommonUtil._getValueByName(jsonData, conf.pageNow), 10);
                d = (pNow - 1) * conf.pageSize;
                e = pNow * conf.pageSize;
            }
            var tee = "1-0";
            for (; d < e; d++) {
                var rowdata = json[d];
                if (CommonUtil.notNull(rowdata) && !CommonUtil.in_array(jlist, d)) {
                    var tr = document.createElement("tr");
                    tr.ondblclick = trRowDBClick.bind();
                    tr.setAttribute("style", "line-height:" + conf.tbodyHeight + ";");
                    var sm = parseInt(tee.substring(tee.lastIndexOf("-") + 1), 10) + 1;
                    tee = tee.substring(0, tee.lastIndexOf("-"));
                    tee = tee + "-" + sm;
                    tr.setAttribute("d-tree", tee);
                    tbody.appendChild(tr);
                    var cn = "";
                    if (String(conf.setNumber) == "false") {
                        cn = "none";
                    }
                    var ntd_d = tr.insertCell( - 1);
                    ntd_d.setAttribute("style", "text-align:center;width: 15px;display: " + cn + ";");
                    var rowindex = tr.rowIndex;
                    ntd_d.innerHTML = rowindex;
                    var cbk = "";
                    if (String(conf.checkbox) == "false") {
                        cbk = "none";
                    }
                    var td_d = tr.insertCell( - 1);
                    td_d.setAttribute("style", "text-align:center;width: 28px;display: " + cbk + ";");
                    var chkbox = document.createElement("INPUT");
                    chkbox.type = "checkbox";
                    chkbox.className = "i-checks";
                    chkbox.setAttribute("cid", CommonUtil._getValueByName(rowdata, l_tree.id));
                    chkbox.setAttribute("pid", CommonUtil._getValueByName(rowdata, l_tree.pid));
                    chkbox.setAttribute("_l_key", "checkbox");
                    chkbox.value = CommonUtil._getValueByName(rowdata, conf.checkValue);
                    td_d.appendChild(chkbox);
                    $.each(column,
                    function(o) {
                        var td_o = tr.insertCell( - 1);
                        td_o.className = column[o].tbodyClass;
                        var at = "text-align:" + column[o].align + ";width: " + column[o].width + ";vertical-align: middle;word-break:break-all;word-wrap: break-word;";
                        if (column[o].hide == true) {
                            at += "display:" + (column[o].hide ? "none": "block");
                        }
                        td_o.setAttribute("style", at);
                        var colkey = column[o].colkey;
                        var data = CommonUtil.notEmpty(CommonUtil._getValueByName(rowdata, colkey));
                        if (conf.treeGrid != undefined) {
                            var lt = l_tree.name.split(",");
                            if (CommonUtil.in_array(lt, colkey)) {
                                var itree = document.createElement("i");
                                if (String(l_tree.hide) == "true") {
                                    itree.className = "fa fa-caret-right";
                                } else {
                                    itree.className = "fa fa-caret-down";
                                }
                                itree.onclick = datatree.bind();
                                td_o.appendChild(itree);
                                var divspan = document.createElement("span");
                                divspan.className = "l_test";
                                divspan.setAttribute("style", "line-height:" + conf.tbodyHeight + ";");
                                var v_data = "";
                                if (column[o].renderData) {
                                    var fn = new Function("return " + column[o].renderData)(rowindex, data, rowdata, colkey);
                                    v_data = fn(rowindex, data, rowdata, colkey);
                                } else {
                                    v_data = data;
                                }
                                divspan.innerHTML = v_data;
                                if (column[o].title) {
                                    td_o.title = v_data;
                                }
                                td_o.appendChild(divspan);
                            } else {
                                var v_data = "";
                                if (column[o].renderData) {
                                    var fn = new Function("return " + column[o].renderData)(rowindex, data, rowdata, colkey);
                                    v_data = fn(rowindex, data, rowdata, colkey);
                                } else {
                                    v_data = data;
                                }
                                td_o.innerHTML = v_data;
                                if (column[o].title) {
                                    td_o.title = v_data;
                                }
                            }
                        } else {
                            var v_data = "";
                            if (column[o].renderData) {
                                var fn = new Function("return " + column[o].renderData)(rowindex, data, rowdata, colkey);
                                v_data = fn(rowindex, data, rowdata, colkey);
                            } else {
                                v_data = data;
                            }
                            td_o.innerHTML = v_data;
                            if (column[o].title) {
                                td_o.title = v_data;
                            }
                        }
                    });
                    if (conf.treeGrid != undefined) {
                        if (l_tree.type == 1) {
                            treeHtml(tbody, rowdata, tee)
                        } else {
                            var obj = json[d];
                            jlist.push(d);
                            treeSimpleHtml(tbody, json, obj, tee);
                        }
                    }
                }
            }
            if (conf.treeGrid != undefined) {
                var tr = $("#" + (grid.id) + " tr[d-tree]");
                tr.each(function() {
                    var dtv = $(this).attr("d-tree");
                    var sum = dtv.split("-").length - 2;
                    sum = parseInt(sum, 10) * 28;
                    var dtr = $(this).find(".fa.fa-caret-right");
                     var td;
                     if(sum !=0){
                     if (CommonUtil.notNull(dtr)) {
                    	 dtr.each(function() {
                            td = $(this).parent();
                            $(td).css("padding-left", sum);
                    	 });
                     } else {
                        dtr = $(this).find(".fa.fa-caret-down");
                        td = dtr.eq(0).parent();
                        $(td).css("padding-left", sum);
                        
                     }   
                    } 
                });
                tr.each(function() {
                    var tv = $(this).attr("d-tree");
                    var dv = $("#" + (grid.id) + " tr[d-tree^='" + tv + "-']");
                    if (!CommonUtil.notNull(dv)) {
                        $(this).find(".fa.fa-caret-right").remove();
                        $(this).find(".fa.fa-caret-down").remove();
                    }
                })
            }
        };
        var fenyeDiv = function(jsonData) {
            $("#" + grid.id + " div.fenyeDiv").remove();
            var totalRecords = CommonUtil._getValueByName(jsonData, conf.totalRecords);
            var totalPages = CommonUtil._getValueByName(jsonData, conf.totalPages);
            var pageNow = CommonUtil._getValueByName(jsonData, conf.pageNow);
            var pageSize = jsonData.pageSize;

            if (String(conf.local) == "true") {
                totalRecords = jsonData.records.length;
                totalPages = Math.ceil(totalRecords / conf.pageSize)
            }


            var currentStartPage = 1 + (pageSize * (pageNow - 1));
            var currentEndPage = pageNow * pageSize >= totalRecords ? totalRecords : pageNow * pageSize;


            var bdiv = document.createElement("div");
            bdiv.id = "fenyeDiv";
            bdiv.setAttribute("style", "vertical-align: middle;");
            bdiv.className = "fenyeDiv span12 center";
            grid.appendChild(bdiv);
            var btable = document.createElement("table");
            btable.width = "100%";
            bdiv.appendChild(btable);
            var btr = document.createElement("tr");
            btable.appendChild(btr);
            var btd_1 = document.createElement("td");
            btd_1.style.textAlign = "left";
            btr.appendChild(btd_1);
            var btddiv = document.createElement("div");
            btddiv.className = "pagination";
            btd_1.appendChild(btddiv);
            var divul = document.createElement("ul");
            divul.setAttribute("style","list-style-type:none;margin-left:0px;");
            btddiv.appendChild(divul);
            var ulli = document.createElement("li");
            ulli.className = "prev";
            divul.appendChild(ulli);
            var lia = document.createElement("span");
            // lia.href = "javascript:void(0);";
            ulli.appendChild(lia);
            //lia.innerHTML = "总 " + totalRecords + " 条 每页 " + conf.pageSize + " 条 共 " + totalPages + " 页";

            lia.innerHTML = "Showing " + currentStartPage + " to " + currentEndPage + " of " + totalRecords + " rows";

            var btd_1 = document.createElement("td");
            btd_1.style.textAlign = "right";
            btr.appendChild(btd_1);
            var divul_2 = document.createElement("ul");
            divul_2.className = "dataTables_paginate paging_bootstrap pagination";
            btd_1.appendChild(divul_2);
            if (String(conf.selectPage) == "true") {
                var ulli_8 = document.createElement("li");
                divul_2.appendChild(ulli_8);
                var lia_8_span = document.createElement("span");
                lia_8_span.setAttribute("style", "padding: 0px 10px;margin-right: 5px;");
                // lia_8_span.innerHTML = "&nbsp;&nbsp;每页显示";
                ulli_8.appendChild(lia_8_span);
                var lia_8_A = document.createElement("select");
                lia_8_A.setAttribute("style", "border:0;");
                lia_8_A.onchange = pageBind.bind();
                lia_8_span.appendChild(lia_8_A);
                
                var lia_text = document.createElement("span");
                lia_text.innerHTML = "&nbsp;&nbsp;rows per page";
                lia_8_span.appendChild(lia_text);


                var sp = conf.selectPageSize;
                for(var it=0;it<sp.length;it++){
                    var op = new Option(sp[it], sp[it]);
                    lia_8_A.options.add(op);
                    if (sp[it] == jsonData.pageSize) {
                        op.selected = "selected";
                    }
                }
            }
            if (String(conf.goPage) == "true") {
                var ulli_8 = document.createElement("li");
                divul_2.appendChild(ulli_8);
                var ulli_input = document.createElement("input");
                ulli_input.onkeydown = pageBind.bind();
                ulli_input.className = "col-xs-1 text-center";
                ulli_input.setAttribute("style", "WIDTH:40PX;padding: 4px 10px;margin-right: 5px; border: 1px solid #e5e6e7;");
                ulli_input.type = "text";
                ulli_input.value = pageNow;
                ulli_8.appendChild(ulli_input);
                var lia_8_A = document.createElement("a");
                lia_8_A.onclick = pageBind.bind();
                lia_8_A.setAttribute("style", "margin-right: 5px;");
                lia_8_A.href = "javascript:void(0);";
                lia_8_A.className = "btn btn-sm btn-danger";
                lia_8_A.innerHTML = "GO";
                lia_8_A.id = "page_go";
                ulli_8.appendChild(lia_8_A);
            }
            if (pageNow > 1) {
                var ulli_2 = document.createElement("li");
                divul_2.appendChild(ulli_2);
                var lia_2 = document.createElement("a");
                lia_2.onclick = pageBind.bind();
                lia_2.id = "pagNum_" + (pageNow - 1);
                lia_2.href = "javascript:void(0);";
                lia_2.innerHTML = "<";
                ulli_2.appendChild(lia_2);
            } else {
                var ulli_2 = document.createElement("li");
                ulli_2.className = "prev disabled";
                divul_2.appendChild(ulli_2);
                var lia_2 = document.createElement("a");
                lia_2.href = "javascript:void(0);";
                lia_2.innerHTML = "<";
                ulli_2.appendChild(lia_2);
            }
            var pg = pagesIndex(conf.pagecode, pageNow, totalPages);
            var startpage = pg.start;
            var endpage = pg.end;
            if (startpage != 1) {
                var ulli_3 = document.createElement("li");
                divul_2.appendChild(ulli_3);
                var lia_3 = document.createElement("a");
                lia_3.onclick = pageBind.bind();
                lia_3.href = "javascript:void(0);";
                lia_3.id = "pagNum_1";
                lia_3.innerHTML = "1...";
                ulli_3.appendChild(lia_3);
            }
            for (var i = startpage; i <= endpage; i++) {
                if (i == pageNow) {
                    var ulli_5 = document.createElement("li");
                    ulli_5.className = "active";
                    divul_2.appendChild(ulli_5);
                    var lia_5 = document.createElement("a");
                    lia_5.href = "javascript:void(0);";
                    lia_5.innerHTML = i;
                    ulli_5.appendChild(lia_5);
                } else {
                    var ulli_5 = document.createElement("li");
                    divul_2.appendChild(ulli_5);
                    var lia_5 = document.createElement("a");
                    lia_5.onclick = pageBind.bind();
                    lia_5.href = "javascript:void(0);";
                    lia_5.id = "pagNum_" + i;
                    lia_5.innerHTML = i;
                    ulli_5.appendChild(lia_5);
                }
            }
            if (endpage != totalPages) {
                var ulli_6 = document.createElement("li");
                divul_2.appendChild(ulli_6);
                var lia_6 = document.createElement("a");
                lia_6.onclick = pageBind.bind();
                lia_6.href = "javascript:void(0);";
                lia_6.id = "pagNum_" + totalPages;
                lia_6.innerHTML = "..." + totalPages;
                ulli_6.appendChild(lia_6);
            }
            if (pageNow >= totalPages) {
                var ulli_7 = document.createElement("li");
                ulli_7.className = "prev disabled";
                divul_2.appendChild(ulli_7);
                var lia_7 = document.createElement("a");
                lia_7.href = "javascript:void(0);";
                lia_7.innerHTML = ">";
                ulli_7.appendChild(lia_7);
            } else {
                var ulli_7 = document.createElement("li");
                ulli_7.className = "next";
                divul_2.appendChild(ulli_7);
                var lia_7 = document.createElement("a");
                lia_7.onclick = pageBind.bind();
                lia_7.href = "javascript:void(0);";
                lia_7.id = "pagNum_" + (pageNow + 1);
                lia_7.innerHTML = ">";
                ulli_7.appendChild(lia_7);
            }
        };
        var treeHtml = function(tbody, data, tee) {
            tee = tee + "-0";
            if (data == undefined) {
                return;
            }
            var jsonTree = data.children;
            if (CommonUtil.notNull(jsonTree)) {
                var tte = false;
                $.each(jsonTree,
                function(jt) {
                    if (CommonUtil.notNull(jsonTree[jt].children)) {
                        tte = true;
                    }
                    var tr = document.createElement("tr");
                   
                    tr.ondblclick = function (ee) {
                        if (conf.trRowClick) {
                            var tr = $(ee.currentTarget)[0];
                            var checkboxes = $(ee.currentTarget).find("input")[0];
                            var cn = $(checkboxes.parentNode);
                            if (checkboxes.checked) {
                                checkboxes.checked = false;
                                cn.removeClass("checked");
                                restoreBgColor(tr);
                            } else {
                                checkboxes.checked = true;
                                cn.addClass("checked");
                                setBgColor(tr);
                            }
                            conf.trRowClick(tr.rowIndex, jsonTree[jt], checkboxes.checked)
                        }
                    }

                    var di = "";
                    if (String(l_tree.hide) == "true") {
                        di = "display: none;";
                    }
                    tr.setAttribute("style", "line-height:" + conf.tbodyHeight + ";" + di);
                    var sm = parseInt(tee.substring(tee.lastIndexOf("-") + 1), 10) + 1;
                    tee = tee.substring(0, tee.lastIndexOf("-"));
                    tee = tee + "-" + sm;
                    tr.setAttribute("d-tree", tee);
                    tbody.appendChild(tr);
                    var cn = "";
                    if (String(conf.setNumber) == "false") {
                        cn = "none";
                    }
                    var ntd_d = tr.insertCell( - 1);
                    ntd_d.setAttribute("style", "text-align:center;width: 15px;display: " + cn + ";");
                    var rowindex = tr.rowIndex;
                    ntd_d.innerHTML = rowindex;
                    var cbk = "";
                    if (String(conf.checkbox) == "false") {
                        cbk = "none";
                    }
                    var td_d = tr.insertCell( - 1);
                    td_d.setAttribute("style", "text-align:center;width: 28px;display: " + cbk + ";");
                    var chkbox = document.createElement("INPUT");
                    chkbox.type = "checkbox";
                    chkbox.className = "i-checks";
                    chkbox.setAttribute("cid", CommonUtil._getValueByName(jsonTree[jt], l_tree.id));
                    chkbox.setAttribute("pid", CommonUtil._getValueByName(jsonTree[jt], l_tree.pid));
                    chkbox.setAttribute("_l_key", "checkbox");
                    chkbox.value = CommonUtil._getValueByName(jsonTree[jt], conf.checkValue);
                    td_d.appendChild(chkbox);
                    $.each(column,
                    function(o) {
                        if (!column[o].hide || column[o].hide == undefined) {
                            var td_o = tr.insertCell( - 1);
                            td_o.setAttribute("style", "text-align:" + column[o].align + ";width: " + column[o].width + ";vertical-align: middle;word-break:break-all;word-wrap: break-word;");
                            var rowdata = jsonTree[jt];
                            var colkey = column[o].colkey;
                            var data = CommonUtil.notEmpty(CommonUtil._getValueByName(rowdata, colkey));
                            if (conf.treeGrid != undefined) {
                                var lt = l_tree.name.split(",");
                                if (CommonUtil.in_array(lt, column[o].colkey)) {
                                    var itree = document.createElement("i");
                                    if (String(l_tree.hide) == "true") {
                                        itree.className = "fa fa-caret-right";
                                    } else {
                                        itree.className = "fa fa-caret-down";
                                    }
                                    itree.onclick = datatree.bind();
                                    td_o.appendChild(itree);
                                    var divspan = document.createElement("span");
                                    divspan.className = "l_test";
                                    divspan.setAttribute("style", "line-height:" + conf.tbodyHeight + ";");
                                    var v_data = "";
                                    if (column[o].renderData) {
                                        var fn = new Function("return " + column[o].renderData)(rowindex, data, rowdata, colkey);
                                        v_data = fn(rowindex, data, rowdata, colkey);
                                    } else {
                                        v_data = data;
                                    }
                                    divspan.innerHTML = v_data;
                                    if (column[o].title) {
                                        td_o.title = v_data;
                                    }
                                    td_o.appendChild(divspan);
                                } else {
                                    var v_data = "";
                                    if (column[o].renderData) {
                                        var fn = new Function("return " + column[o].renderData)(rowindex, data, rowdata, colkey);
                                        v_data = fn(rowindex, data, rowdata, colkey);
                                    } else {
                                        v_data = data;
                                    }
                                    td_o.innerHTML = v_data;
                                    if (column[o].title) {
                                        td_o.title = v_data;
                                    }
                                }
                            } else {
                                var v_data = "";
                                if (column[o].renderData) {
                                    var fn = new Function("return " + column[o].renderData)(rowindex, data, rowdata, colkey);
                                    v_data = fn(rowindex, data, rowdata, colkey);
                                } else {
                                    v_data = data;
                                }
                                td_o.innerHTML = v_data;
                                if (column[o].title) {
                                    td_o.title = v_data;
                                }
                            }
                        }
                    });
                    if (tte) {
                        treeHtml(tbody, jsonTree[jt], tee);
                    }
                });
                tee = tee.substring(0, tee.lastIndexOf("-"));
            }
        };
        var treeSimpleHtml = function(tbody, jsonTree, obj, tee) {
            tee = tee + "-0";
            $.each(jsonTree,
            function(jt) {
                if (CommonUtil.notNull(jsonTree[jt])) {
                    var jsb = CommonUtil._getValueByName(jsonTree[jt], l_tree.pid);
                    var ob = CommonUtil._getValueByName(obj, l_tree.id);
                    if (jsb == ob && !CommonUtil.in_array(jlist, jt)) {
                        var tr = document.createElement("tr");
                        var di = "";
                        if (String(l_tree.hide) == "true") {
                            di = "display: none;";
                        }
                        tr.setAttribute("style", "line-height:" + conf.tbodyHeight + ";" + di);
                        var sm = parseInt(tee.substring(tee.lastIndexOf("-") + 1), 10) + 1;
                        tee = tee.substring(0, tee.lastIndexOf("-"));
                        tee = tee + "-" + sm;
                        tr.setAttribute("d-tree", tee);
                        tbody.appendChild(tr);
                        var cn = "";
                        if (String(conf.setNumber) == "false") {
                            cn = "none";
                        }
                        var ntd_d = tr.insertCell( - 1);
                        ntd_d.setAttribute("style", "text-align:center;width: 15px;display: " + cn + ";");
                        var rowindex = tr.rowIndex;
                        ntd_d.innerHTML = rowindex;
                        var cbk = "";
                        if (String(conf.checkbox) == "false") {
                            cbk = "none";
                        }
                        var td_d = tr.insertCell( - 1);
                        td_d.setAttribute("style", "text-align:center;width: 28px;display: " + cbk + ";");
                        var chkbox = document.createElement("INPUT");
                        chkbox.type = "checkbox";
                        chkbox.className = "i-checks";
                        chkbox.setAttribute("cid", CommonUtil._getValueByName(jsonTree[jt], l_tree.id));
                        chkbox.setAttribute("pid", CommonUtil._getValueByName(jsonTree[jt], l_tree.pid));
                        chkbox.setAttribute("_l_key", "checkbox");
                        chkbox.value = CommonUtil._getValueByName(jsonTree[jt], conf.checkValue);
                        td_d.appendChild(chkbox);
                        $.each(column,
                        function(o) {
                            if (!column[o].hide || column[o].hide == undefined) {
                                var td_o = tr.insertCell( - 1);
                                td_o.setAttribute("style", "text-align:" + column[o].align + ";width: " + column[o].width + ";vertical-align: middle;word-break:break-all;word-wrap: break-word;");
                                var rowdata = jsonTree[jt];
                                var colkey = column[o].colkey;
                                var data = CommonUtil.notEmpty(CommonUtil._getValueByName(rowdata, colkey));
                                if (conf.treeGrid != undefined) {
                                    var lt = l_tree.name.split(",");
                                    if (CommonUtil.in_array(lt, column[o].colkey)) {
                                        var itree = document.createElement("i");
                                        if (String(l_tree.hide) == "true") {
                                            itree.className = "fa fa-caret-right";
                                        } else {
                                            itree.className = "fa fa-caret-down";
                                        }
                                        itree.onclick = datatree.bind();
                                        td_o.appendChild(itree);
                                        var divspan = document.createElement("span");
                                        divspan.className = "l_test";
                                        divspan.setAttribute("style", "line-height:" + conf.tbodyHeight + ";");
                                        var v_data = "";
                                        if (column[o].renderData) {
                                            var fn = new Function("return " + column[o].renderData)(rowindex, data, rowdata, colkey);
                                            v_data = fn(rowindex, data, rowdata, colkey);
                                        } else {
                                            v_data = data;
                                        }
                                        divspan.innerHTML = v_data;
                                        if (column[o].title) {
                                            td_o.title = v_data;
                                        }
                                        td_o.appendChild(divspan);
                                    } else {
                                        var v_data = "";
                                        if (column[o].renderData) {
                                            var fn = new Function("return " + column[o].renderData)(rowindex, data, rowdata, colkey);
                                            v_data = fn(rowindex, data, rowdata, colkey);
                                        } else {
                                            v_data = data;
                                        }
                                        td_o.innerHTML = v_data;
                                        if (column[o].title) {
                                            td_o.title = v_data;
                                        }
                                    }
                                } else {
                                    var v_data = "";
                                    if (column[o].renderData) {
                                        var fn = new Function("return " + column[o].renderData)(rowindex, data, rowdata, colkey);
                                        v_data = fn(rowindex, data, rowdata, colkey);
                                    } else {
                                        v_data = data;
                                    }
                                    td_o.innerHTML = v_data;
                                    if (column[o].title) {
                                        td_o.title = v_data;
                                    }
                                }
                            }
                        });
                        var o = jsonTree[jt];
                        jlist.push(jt);
                        treeSimpleHtml(tbody, jsonTree, o, tee);
                    }
                }
            });
            tee = tee.substring(0, tee.lastIndexOf("-"));
        };
        var uptr = function(getUp) {
            if (getUp.css("display") == "none") {
                return uptr(getUp.prev());
            }
            return getUp;
        };
        var downtr = function(getdown) {
            if (getdown.css("display") == "none") {
                return downtr(getdown.next());
            }
            return getdown;
        };
        var lyGridUp = function(jsonUrl) {
            var cks = $("#" + grid.id + " input[_l_key='checkbox']:checkbox:checked");
            $.each(cks,
            function(i, item) {
                var ck = cks[i];
                if (ck) {
                    var onthis = $(ck).parent().parent().parent();
                    var getUp = onthis.prev();
                    var ck_tree = $(onthis).attr("d-tree");
                    var getUp_tree = $(getUp).attr("d-tree");
                    if (ck_tree.indexOf(getUp_tree) > -1) {
                        return
                    }
                    var pup = uptr(getUp);
                    $(pup).before(onthis);
                    $(onthis).after($("tr[d-tree^='" + $(onthis).attr("d-tree") + "-']"));
                    var row = rowline();
                    var data = [];
                    $.each(row,
                    function(i) {
                        data.push(conf.checkValue + "[" + i + "]=" + row[i].rowId);
                        data.push("rowId[" + i + "]=" + row[i].rowNum);
                    });
                    if (jsonUrl) {
                        $.ajax({
                            type: "POST",
                            data: data.join("&"),
                            url: jsonUrl,
                            dataType: "json",
                        })
                    }
                }
            })
        };
        var lyGridDown = function(jsonUrl) {
            var cks = $("#" + grid.id + " input[_l_key='checkbox']:checkbox:checked");
            $.each(cks,
            function(i, item) {
                var ck = cks[i];
                if (ck) {
                    var onthis = $(ck).parent().parent().parent();
                    onthis.find("td").eq(2).find("i").removeClass("fa fa-caret-down").addClass("fa fa-caret-right");
                    var trd = $("tr[d-tree^='" + $(onthis).attr("d-tree") + "-']");
                    trd.hide();
                    var getdown = onthis.next();
                    var pup = downtr(getdown);
                    var ck_tree = $(onthis).attr("d-tree").split("-");
                    var downUp_tree = $(pup).attr("d-tree").split("-");
                    if (ck_tree.length != downUp_tree.length) {
                        return
                    }
                    $(onthis).before(pup);
                    $(pup).after($("#" + (grid.id) + " tr[d-tree^='" + $(pup).attr("d-tree") + "-']"));
                    var row = rowline();
                    var data = [];
                    $.each(row,
                    function(i) {
                        data.push(conf.checkValue + "[" + i + "]=" + row[i].rowId);
                        data.push("rowId[" + i + "]=" + row[i].rowNum);
                    });
                    if (jsonUrl) {
                        $.ajax({
                            type: "POST",
                            data: data.join("&"),
                            url: jsonUrl,
                            dataType: "json",
                        })
                    }
                }
            })
        };
       
        var selectRow = function(pagId) {
            var ck = getSelectedCheckbox(pagId);
            var json = CommonUtil._getValueByName(returnData, conf.records);
            var ret = [];
            $.each(json,
            function(d) {
                $.each(ck,
                function(c) {
                    if (ck[c] == CommonUtil._getValueByName(json[d], conf.checkValue)) {
                        ret.push(json[d]);
                    } else {
                        var data = json[d].children;
                        if (CommonUtil.notNull(data)) {
                            selectRowChildren(ck[c], ret, data);
                        }
                    }
                })
            });
            return ret;
        };
        var selectRowChildren = function(v, ret, child) {
            $.each(child,
            function(c) {
                if (v == CommonUtil._getValueByName(child[c], conf.checkValue)) {
                    ret.push(child[c]);
                } else {
                    var data = child[c].children;
                    if (CommonUtil.notNull(data)) {
                        selectRowChildren(v, ret, data);
                    }
                }
            })
        };
        var trRowDBClick = function(event) {
            if (conf.trRowClick) {
                var tr = $(event.currentTarget)[0];
                var checkboxes = $(event.currentTarget).find("input")[0];
                var cn = $(checkboxes.parentNode);
                if (checkboxes.checked) {
                    checkboxes.checked = false;
                    cn.removeClass("checked");
                    restoreBgColor(tr);
                } else {
                    checkboxes.checked = true;
                    cn.addClass("checked");
                    setBgColor(tr);
                }
                var rowdata = CommonUtil._getValueByName(returnData, conf.records);
                conf.trRowClick(tr.rowIndex, rowdata[tr.rowIndex - 1], checkboxes.checked)
            }
        };
        var trClick = function() {};
        var checkboxbind = function(event) {
            var checkboxes = $("#" + grid.id + " input[_l_key='checkbox']");
            if (event.checked) {
                checkboxes.prop("checked", true);
            } else {
                checkboxes.prop("checked", false);
            }
            checkboxes.each(function() {
                var tr = this.parentNode.parentNode.parentNode;
                var cn = $(this.parentNode);
                if (event.checked) {
                    cn.addClass("checked");
                    setBgColor(tr);
                } else {
                    cn.removeClass("checked");
                    restoreBgColor(tr);
                }
            })
        };

        var highlight = function(event) {
            var tr = event.parentNode.parentNode.parentNode;
            event.checked ? setBgColor(tr) : restoreBgColor(tr);
            var ttr = $(tr).attr("d-tree");
            var tr_tree = $("#" + (grid.id) + " tr[d-tree^='" + ttr + "-']");
            if (conf.treeGrid.checkChild) {
                tr_tree.each(function() {
                    var cn = $(this).find("td").eq(1).find("div").eq(0);
                    var checkboxes = cn.find("input");
                    if (event.checked) {
                        checkboxes.prop("checked", true);
                        cn.addClass("checked");
                        setBgColor(this);
                    } else {
                        checkboxes.prop("checked", false);
                        cn.removeClass("checked");
                        restoreBgColor(this);
                    }
                })
            }

            var allItemCheckboxes = $("#" + grid.id + " input[_l_key='checkbox']");
            var allCheckBox = $("#" + grid.id + " th:eq(1) input[class*='i-checks']");

            if(allItemCheckboxes.length == $("#" + grid.id + " input[_l_key='checkbox']:checked").length) {
                allCheckBox.prop("checked",true);
                allCheckBox.parent().addClass("checked");
            }else{
                allCheckBox.prop("checked",false);
                allCheckBox.parent().removeClass("checked");
            }

        };

        var pageBind = function(e) {
            debugger;
            var evt = arguments[0] || window.event;
            var b = true;
            if (evt.keyCode != undefined && evt.keyCode != 13) {
                b = false;
            }
            if (b) {
                var obj = evt.srcElement || evt.target;
                var page = CommonUtil._getValueByName(returnData, conf.pageNow);
                var pageSize = $(obj).parent().parent().find("select").eq(0).val();
                if (obj.nodeName == "INPUT") {
                    page = obj.value;
                } else {
                    if (obj.nodeName == "SELECT") {
                        pageSize = obj.value;
                    } else {
                        if (obj.id == "page_go") {
                            page = obj.previousSibling.value;
                        } else {
                            if (obj.nodeName == "A") {
                                page = obj.id.split("_")[1];
                            }
                        }
                    }
                }
                if (isNaN(page)) {
                    return;
                }
                if (String(conf.local) == "true") {

                    var cPage = Math.ceil(returnData.records.length/pageSize);
                    if( cPage  >= page){
                        returnData[conf.pageNow] = parseInt(page, 10);
                    }else{
                        returnData[conf.pageNow] = parseInt(cPage, 10);
                    }              
                    returnData["pageSize"] = parseInt(pageSize, 10);
                    var mconf = $.extend(conf, {
                        pageSize: parseInt(pageSize, 10)
                    });
                    mconf.data.pageSize = parseInt(pageSize, 10);
                    cBodytb(returnData);
                    if (String(mconf.usePage) == "true") {
                        fenyeDiv(returnData);
                        lyickeck();
                    }
                } else {
                    conf.data = $.extend(conf.data, {
                        pageNow: page,
                        pageSize: pageSize
                    });
                    replayData(conf);
                }
            }
            if (conf.dymCol) {
                ul_dmycol();
            }
        };
        var sortBind = function() {
            debugger;
            var evt = arguments[0] || window.event;
            var sortObj = evt.srcElement || evt.target;
            var sortOrder = "";
            var sortField = $(sortObj.parentNode).data("field");

           
            $(".ly-table thead th div.sortable").not($(sortObj)).removeClass("asc").removeClass("desc");

            if( sortObj.className.indexOf("asc") <= -1 && sortObj.className.indexOf("desc") <= -1 ){
                $(sortObj).addClass("asc");
                sortOrder = "asc";
            }else if(sortObj.className.indexOf("asc") > -1) {
                $(sortObj).removeClass("asc").addClass("desc");
                sortOrder = "desc";
            }else{
                $(sortObj).removeClass("desc").addClass("asc");
                sortOrder = "asc";
            }

               

            conf.data = $.extend(conf.data, {
                sidx: sortField,
                sord: sortOrder
            });
            if (String(conf.local) == "true") {
                replayData(conf, "0", sortField, sortOrder);
            } else {
                replayData(conf);
            }
        };
        var datatree = function() {
            var evt = arguments[0] || window.event;
            var img = evt.srcElement || evt.target;
            var ttrd = img.parentElement.parentElement;
            var ttr = ttrd.getAttribute("d-tree");
            if (img.className.indexOf("fa fa-caret-down") > -1) {
            	var dtr = $(ttrd).find(".fa.fa-caret-down");
            	dtr.each(function() {
            		this.className = "fa fa-caret-right";
                });
                var tr = $("#" + (grid.id) + " tr[d-tree^='" + ttr + "-']");
                tr.each(function() {
                    $(this).find("td").eq(2).find("i").removeClass("fa fa-caret-down").addClass("fa fa-caret-right")
                });
                tr.hide();
            } else {
            	var dtr = $(ttrd).find(".fa.fa-caret-right");
            	dtr.each(function() {
            		this.className = "fa fa-caret-down";
                });
                for (var m = 0; m < 20; m++) {
                    $("tr[d-tree='" + ttr + "-" + m + "']").show();
                }
            }
        };
        var getChkBox = function(tr) {
            return tr.cells[1].firstChild.firstChild;
        };
        var restoreBgColor = function(tr) {
            for (var i = 0; i < tr.childNodes.length; i++) {
                tr.childNodes[i].style.backgroundColor = ""
            };
        };
        var setBgColor = function(tr) {
            for (var i = 0; i < tr.childNodes.length; i++) {
                tr.childNodes[i].style.backgroundColor = "rgba(0,0,0,.075)"
            };
        };
        var rowline = function() {
            var cb = [];
            var arr = $("#" + grid.id + " table  tr");
            for (var i = arr.length - 1; i > 0; i--) {
                var cbox = getChkBox(arr[i]).value;
                var row = arr[i].rowIndex;
                var sort = {};
                sort.rowNum = row;
                sort.rowId = cbox;
                cb.push(sort);
            }
            return cb.reverse();
        };
        var pagesIndex = function(pagecode, pageNow, pageCount) {
            pagecode = parseInt(pagecode, 10);
            pageNow = parseInt(pageNow, 10);
            pageCount = parseInt(pageCount, 10);
            var startpage = pageNow - (pagecode % 2 == 0 ? pagecode / 2 - 1 : pagecode / 2);
            var endpage = pageNow + pagecode / 2;
            if (startpage < 1) {
                startpage = 1;
                if (pageCount >= pagecode) {
                    endpage = pagecode;
                } else {
                    endpage = pageCount;
                }
            }
            if (endpage > pageCount) {
                endpage = pageCount;
                if ((endpage - pagecode) > 0) {
                    startpage = endpage - pagecode + 1;
                } else {
                    startpage = 1;
                }
            }
            var se = {
                start: startpage,
                end: endpage
            };
            return se;
        };
        var loadData = function(options) {
            $.extend(conf, options);
            replayData(conf);
        };
        var setOptions = function(options) {
            var nconf = conf;
            var data;
            if (options.data) {
                data = $.extend(nconf.data, options.data);
                options.data = data;
            }
            if (options.pageSize) {
                nconf.data.pageSize = options.pageSize
            }
            nconf = $.extend(nconf, options);
            nconf.data.pageNow = 1;
            replayData(nconf);
        };
        var setSelectedCheckbox = function(value,check, pagId) {
            var list = [];
            if (!CommonUtil.notNull(pagId)) {
                pagId = grid.id;
            }
            if (!CommonUtil.notNull(value)) {
                return;
            }
            if (value instanceof Array) {
                list = value;
            } else {
                list.push(value);
            }
            var cks = $("#" + pagId + " input[_l_key='checkbox']");
            $.each(list,
            function(i) {
                $.each(cks,
                function(c) {
                    if (cks[c].value == list[i]) {
                        var tr = cks[c].parentNode.parentNode.parentNode;
                        var checkboxes = cks[c];
                        var cn = $(checkboxes.parentNode);
                        if (check == undefined || check == "true") {
                            checkboxes.checked = true;
                            cn.addClass("checked");
                            setBgColor(tr)
                        } else {
                            checkboxes.checked = false;
                            cn.removeClass("checked");
                            restoreBgColor(tr)
                        }
                    }
                })
            })
        };
        var getSelectedCheckbox = function(pagId) {
            if (!CommonUtil.notNull(pagId)) {
                pagId = grid.id
            }
            var arr = [];
            $("#" + pagId + " input[_l_key='checkbox']:checkbox:checked").each(function() {
                arr.push($(this).val())
            });
            return arr
        };
        var selectTreeRow = function(pagId) {
            var ck = getSelectedCheckbox(pagId);
            var json = CommonUtil._getValueByName(returnData, conf.records);
            var ret = [];
            $.each(json,
            function(d) {
                $.each(ck,
                function(c) {
                    if (ck[c] == CommonUtil._getValueByName(json[d], conf.checkValue)) {
                        ret.push(json[d])
                    } else {
                        $.each(json[d].children,
                        function(child) {
                            if (ck[c] == CommonUtil._getValueByName(json[d].children[child], conf.checkValue)) {
                                ret.push(json[d].children[child])
                            }
                        })
                    }
                })
            });
            return ret
        };
        var getColumn = function() {
            return column
        };
        var exportData = function(url) {
            var form = $("<form>");
            form.attr("style", "display:none");
            form.attr("target", "");
            form.attr("method", "post");
            form.attr("action", rootPath + url);
            $("body").append(form);
            var input1 = $("<input>");
            input1.attr("type", "hidden");
            input1.attr("name", "exportData");
            input1.attr("value", JSON.stringify(column));
            form.append(input1);
            var par = conf.data;
            for (var p in par) {
                var input1 = $("<input>");
                input1.attr("type", "hidden");
                input1.attr("name", p);
                input1.attr("value", par[p]);
                form.append(input1)
            }
            form.submit()
        };
        var getCurrentData = function() {
            return CommonUtil._getValueByName(returnData, conf.records)
        };
        var resultJSONData = function() {
            var alldata = {};
            alldata.records = CommonUtil._getValueByName(returnData, conf.records);
            alldata.pageNow = CommonUtil._getValueByName(returnData, conf.pageNow);
            alldata.totalPages = CommonUtil._getValueByName(returnData, conf.totalPages);
            alldata.totalRecords = CommonUtil._getValueByName(returnData, conf.totalRecords);
            alldata.pageSize = CommonUtil._getValueByName(returnData, "pageSize");
            return alldata
        };
        var ul_dmycol = function() {
            var span_checkbox = $("#" + grid.id + " #ul_dmycol").find(".span_checkbox.checked");
            $.each(span_checkbox,
            function(sck) {
                var u = $(this).attr("span_value");
                $(grid).find("table:eq(0) tr th:nth-child(" + (parseInt(u, 10) + 3) + ")").hide();
                $(grid).find("table:eq(0) tr td:nth-child(" + (parseInt(u, 10) + 3) + ")").hide()
            })
        };
        var dmycolcheck = function(e) {
            var u = $(e.target).attr("span_value");
            if ($(e.target).attr("class").indexOf("checked") == -1) {
                $(e.target).addClass("checked");
                $(grid).find("table:eq(0) tr th:nth-child(" + (parseInt(u, 10) + 3) + ")").hide();
                $(grid).find("table:eq(0) tr td:nth-child(" + (parseInt(u, 10) + 3) + ")").hide()
            } else {
                $(e.target).removeClass("checked");
                $(grid).find("table:eq(0) tr th:nth-child(" + (parseInt(u, 10) + 3) + ")").show();
                $(grid).find("table:eq(0) tr td:nth-child(" + (parseInt(u, 10) + 3) + ")").show()
            }
        };
        var dmycol = function(e) {
            if ($("#" + grid.id + " #ul_dmycol").length > 0) {
                $("#" + grid.id + " #ul_dmycol").toggle()
            } else {
                var ul = document.createElement("ul");
                ul.className = "dmycol-menu";
                ul.id = "ul_dmycol";
                var w = $(e.target.parentNode).width();
                if (w < 130) {
                    var f = 130 - w;
                    ul.setAttribute("style", "margin-left:-" + f + "px;")
                } else {
                    ul.setAttribute("style", "margin-left:0;width:" + w + "px")
                }
                $.each(column,
                function(i, o) {
                    var li = document.createElement("li");
                    var spanbox = document.createElement("span");
                    if (o.hide == true) {
                        spanbox.className = "span_checkbox checked"
                    } else {
                        spanbox.className = "span_checkbox"
                    }
                    spanbox.setAttribute("span_value", i);
                    spanbox.name = o.colkey;
                    spanbox.onclick = dmycolcheck.bind();
                    li.appendChild(spanbox);
                    var sp = document.createElement("span");
                    sp.innerHTML = " " + o.name;
                    li.appendChild(sp);
                    ul.appendChild(li)
                });
                e.target.parentNode.insertBefore(ul, null)
            }
        };
        var lyickeck = function() {
            $("#" + grid.id + " .i-checks").iCheck(conf.iCheck);
            $("#" + grid.id + " th:eq(1) input[class*='i-checks']").on("ifChanged",
            function() {
                checkboxbind(this)
            });
            $("#" + grid.id + " input[_l_key='checkbox']").on("ifChanged",
            function() {
                highlight(this)
            })
        };
        var jsonRequest = function(mconf) {

            if (conf.beforeComplete) {
                conf.beforeComplete(conf)
            }
            var p = {};
            if (mconf.data.pageSize) {
                p.pageSize = mconf.data.pageSize
            } else {
                p.pageSize = mconf.pageSize
            }
            var d = $.extend(mconf.data, p);
            if (String(mconf.local) == "true") {
                var json = {};
                json.records = mconf.jsonUrl;
                json.pageSize = mconf.pageSize;
                json.pageNow = 1;
                json.totalRecords = 0;
                json.totalPages = 0;

                json.sord = mconf.data.sord;
                json.sidx = mconf.data.sidx;
                loadingDiv();
                createBody(json);
                if (conf.afterComplete) {
                    conf.afterComplete(column, resultJSONData())
                }
            } else {
                json = {};
                $.ajax({
                    type: "post",
                    async: conf.async,
                    data: d,
                    url: mconf.jsonUrl,
                    dataType: "json",
                    beforeSend:function(){
                        loadingDiv();
                    },
                    success: function(data) {
                        if (Array.isArray(data)) {
                            json.records = data;
                            json.pageSize = mconf.pageSize;
                            json.pageNow = 1;
                            json.totalRecords = data.length;
                            json.totalPages = 0
                        } else {
                            json = data
                        }
                        createBody(json);
                        // initialization(json);
                        if (conf.afterComplete) {
                            conf.afterComplete(column, resultJSONData())
                        }
                    },
                    error: function(msg) {
                        noDataOrFailDiv("Load data failue");
                    }
                })
            }
        };

        createHeader();
        jsonRequest(conf);
        return {
            setOptions: setOptions,
            loadData: loadData,
            setSelectedCheckbox: setSelectedCheckbox,
            getSelectedCheckbox: getSelectedCheckbox,
            selectRow: selectRow,
            selectTreeRow: selectTreeRow,
            lyGridUp: lyGridUp,
            lyGridDown: lyGridDown,
            resultJSONData: resultJSONData,
            exportData: exportData,
            getColumn: getColumn,
            getCurrentData: getCurrentData
        }
    })
})(jQuery);